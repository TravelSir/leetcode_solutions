"""
    实现很简单，但要求不使用循环递归，且时间复杂度为O(1)，这说明肯定是有规律的
    结果是个位数，那就是0-9,举出这10种情况的例子
    0 = 0 差值: 0
    10 = 1  差值: 9
    38 = 2  差值: 36
    67 = 3  差值: 64
    112 = 4 差值: 108
    41 = 5 差值: 36
    33 = 6 差值: 27
    3112 = 7 差值: 3105
    233 = 8 差值: 225
    27 = 9 差值: 18
    计算差值，可发现结果都是除以9的余数
    但是9的余数只能是0-8，结果却是0-9
    所以算出来的余数+1就能符合结果，如果余数加1了，那么原数得减1来除以9来使余数减1
    所以最后得出的公式为 result = (num-1) % 9 + 1
    but python中的负数求余很蛋疼 -1 % 9 = 9，所以这里0的时候要加个if，强行O(2),很难受
"""


class Solution:
    def addDigits(self, num: int) -> int:
        if num == 0:
            return 0
        return (num-1) % 9 + 1
