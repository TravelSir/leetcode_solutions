"""
解题思路:
首先遍历是要双重循环遍历所有元素的，因为岛屿是有水平或垂直方向构成的，那么在单重循环时可以判断水平方向的构成。
而垂直方向的判读则需要一个上层连接数组来确定，所以我们需要一个中间字典来把上层数组存在岛屿的值存储用于垂直判断是否连接。
那怎么知道最大岛屿呢，我们可以把字典中的值记录成岛屿的最大值，累加下去，如果是水平连接在一起的岛屿，则后面的岛屿的值的指向水平第一个岛屿
步骤如下:
1. 循环的水平逻辑为，下标为i, 字典s初始化为空, 当值为1时，判断字典s内是否存在 i-1 的key
    - 若不存在，则说明前面没有连上，则的用字典记录s[i] = 1,
    - 若存在，则说明与前面的岛屿连上连，则判断s[i-1]的值是否为int
        - 若是int则s[i-1] += 1，用字典记录本身的s[i] = str(s[i-1]),
        - 如不为int，就说前面的岛屿还连接着跟前面的岛屿，且前面岛屿的key所对应的value的int值指向连接的第一个岛屿，
        则s[int(s[i-1])] += 1, s[i] = s[i-1]
2. 但是需要在水平逻辑后加上循环的垂直逻辑为，假设现在是第二层，下标为i，那么字典f就是第一层时候的s，当值为1时，
    - 需要查看对应f[i]是否有值
        - 如果有值为int，则s[i] = f[i] + 1, 且f[i] = (i,)，代表它的值被s[i]所继承，也就是说把s[i]作为头岛屿了,这里我用元组来标记
        - 如果值为str,那就寻找f[int(f[i])]
            - 如果值为tuple，则说明该层已经有岛屿与上层连接，则s[int(f[i])] += 1, s[i] = f[i][0]
                - tip: 这里有个特殊情况，例如: 上层岛屿与这层的坐标相连， 当前这层坐标5与坐标4相连，坐标4不与上层岛屿相连，当坐标5与上层岛屿相连时，应将坐标4的值加给坐标1，并将坐标4的值改为指向坐标1
            - 不为tuple，则s[i] = f[int(f[i])] + 1, 且f[int(f[i])] = (i,)
3. 如何判断最大岛屿呢，在一层循环结束后，遍历字典f，如果key所对应的value值为str，说明它不是岛屿头，若value值为tuple，说明上层该岛屿和这层连接了，
若值为int，说明上层该岛屿和下层未有连接，最大岛屿初始值为0，每次判断是否有int，和最大值比较取两者最大即可


"""


class Solution:
    def maxAreaOfIsland(self, grid):
        f = dict()
        _max = 0
        for floor in grid:
            s = dict()
            for i in range(len(floor)):
                if floor[i] == 1:
                    # 有水平连接
                    head = self.get_head(i, s)
                    if head == i:
                        s[i] = 1
                    else:
                        s[head] += 1
                        s[i] = str(head)

                    f_head = self.get_head(i+1, f)
                    # 垂直相连时
                    if f_head != i+1:
                        # 水平父节点
                        tem = i
                        if type(s[i]) == str:
                            tem = int(s[i])

                        fn = f[f_head]
                        # 上层岛屿已和这层岛屿连接
                        if type(fn) == tuple:
                            # 上层岛屿和这层岛屿连接的头点
                            head = fn[0]
                            # 判断水平父岛屿和垂直父岛屿是否是同一个，是同一个则不用加
                            if head != tem:
                                s[head] += s[tem]
                                s[tem] = str(head)

                        # 未和这层连接
                        else:
                            f[f_head] = (tem, )
                            s[tem] += fn

            for v in f.values():
                if type(v) == int and v > _max:
                    _max = v
            f = s

        # 最后来一次
        for v in f.values():
            if type(v) == int and v > _max:
                _max = v
        return _max

    def get_head(self, i, s):
        if type(s.get(i-1)) == int:
            return i-1
        elif type(s.get(i-1)) == str:
            return self.get_head(int(s[i-1])+1, s)
        elif type(s.get(i-1)) == tuple:
            return i-1
        else:
            return i


if __name__ == '__main__':
    sl = Solution()
    area = [[[1,0,1,0,0,1,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0],[1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1],[1,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0],[1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1],[0,0,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0],[0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1],[0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1],[1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0],[0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1],[1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,0,0,0,0,1],[0,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0],[0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1],[1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0],[0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,1,0,1,1,1],[1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0],[1,1,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1],[0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0],[1,1,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1],[0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,0,0],[0,1,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,1,1,1,0,0,0,0],[1,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0],[1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1]],
        [[1, 0, 1, 1, 1, 1, 1],
         [1, 0, 1, 0, 0, 1, 1],
         [1, 1, 1, 0, 0, 0, 1],
         [1, 1, 1, 1, 1, 0, 1],
         [1, 0, 0, 1, 1, 0, 1],
         [1, 1, 1, 1, 0, 1, 1]],
            [[1,1,1],[1,0,1],[0,0,1]],
            [[1,1,1],[1,0,1]],
            [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 1]]]
    for a in area:
        print(sl.maxAreaOfIsland(a))
