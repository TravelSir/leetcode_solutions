"""
解题思路:
计算一个数的n次幂函数，最简单的方法就是循环n次计算，时间复杂度为O(n)
但是我们仔细思考，假入计算2的4次方，其实2^4 = 2^2 * 2^2。那么其实我们不需要计算4次，只用计算2次，这就是二分
分奇偶情况:
n为偶数: x^n = (x^2)^(n//2)
n为奇数: x^n = (x^2)^(n//2)*x

所以当n为偶数时，2^10 = (2^2)^5 = 4^5
当n为奇数时，4^5 = (4^2)^2*4 = 8^2*4

设result = 1
所以当n的偶数时，x = x*x
当n为奇数时，要先乘掉不足以二分的原x值，result *= x，然后x再 x *= x，这也是n=1时把最后的结果乘上


判断一个数是否为奇偶数，直接和1与操作即可，奇数的最后一位一定是1，偶数的最后一位一定是0
"""


class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1.0

        if n < 0:
            x = 1 / x
            n = -n

        res = 1
        while n:
            if n & 1:
                res *= x
            x *= x
            n >>= 1

        return res


if __name__ == '__main__':
    print(Solution().myPow(2.0, 10))

